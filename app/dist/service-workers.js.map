{"mappings":"YAGA,MAGMA,EAAgB,CACpB,CAEEC,MAAO,IAAIC,OAAO,gCAEpB,CACED,MAAO,IAAIC,OAAO,sBAEpB,CACED,MAAO,IAAIC,OAAO,2BAEpB,CACED,MAAO,IAAIC,OAAO,wBAItBC,KAAKC,iBAAiB,SAAUC,IAC9BA,EAAMC,YAAYC,EAAcF,EAAMG,aAGxC,MAAMD,EAAgBE,MAAMD,GAEJ,OAAlBA,EAAQE,QAAmBV,EAAcW,MAAKC,GAAKJ,EAAQK,IAAIC,MAAMF,EAAEX,SAClEc,EAAW,CAACP,QAASA,IAEvBQ,MAAMR,GAGTO,EAAaN,OAAOD,QAAEA,MAE1B,MAAMS,QAA0BC,OAAOJ,MAAMN,GAC7C,GAAIS,EACF,OAAOA,EAIT,IACE,MAAME,QAA4BH,MAAMR,GAKxC,OADAY,EAAWZ,EAASW,EAAoBE,SACjCF,EACP,MAAOG,GAGP,OAAO,IAAIC,SAAS,yBAA0B,CAC5CC,OAAQ,IACRC,QAAS,CAAE,eAAgB,kBAK3BL,EAAaX,MAAOD,EAASkB,KACjC,MAAMC,QAAcT,OAAOU,KAxDT,yBAyDZD,EAAME,IAAIrB,EAASkB,I","sources":["src/service-workers.js"],"sourcesContent":["// Cache implementation based on\n// https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers\n\nconst CACHE_VERSION = \"@VERSION@\";\nconst CACHE_NAME = `zusam-${CACHE_VERSION}`;\n\nconst cached_routes = [\n  {\n    // This may be an issue when notifications will become 'readable'\n    route: new RegExp(\"/api/notifications/[^/]+/?$\"),\n  },\n  {\n    route: new RegExp(\"/api/images/crop/\"),\n  },\n  {\n    route: new RegExp(\"/api/images/thumbnail/\"),\n  },\n  {\n    route: new RegExp(\"/api/links/by_url\\?\"),\n  }\n];\n\nself.addEventListener(\"fetch\", (event) => {\n  event.respondWith(handleRequest(event.request));\n});\n\nconst handleRequest = async request => {\n  // cache-update routes: retrieve from cache and update in background\n  if (request.method == \"GET\" && cached_routes.some(r => request.url.match(r.route))) {\n    return cacheFirst({request: request});\n  }\n  return fetch(request);\n};\n\nconst cacheFirst = async ({ request }) => {\n  // First try to get the resource from the cache\n  const responseFromCache = await caches.match(request);\n  if (responseFromCache) {\n    return responseFromCache;\n  }\n\n  // Next try to get the resource from the network\n  try {\n    const responseFromNetwork = await fetch(request);\n    // response may be used only once\n    // we need to save clone to put one copy in cache\n    // and serve second one\n    putInCache(request, responseFromNetwork.clone());\n    return responseFromNetwork;\n  } catch (error) {\n    // there is nothing we can do, but we must always\n    // return a Response object\n    return new Response(\"Network error happened\", {\n      status: 408,\n      headers: { \"Content-Type\": \"text/plain\" },\n    });\n  }\n};\n\nconst putInCache = async (request, response) => {\n  const cache = await caches.open(CACHE_NAME);\n  await cache.put(request, response);\n};\n"],"names":["cached_routes","route","RegExp","self","addEventListener","event","respondWith","handleRequest","request","async","method","some","r","url","match","cacheFirst","fetch","responseFromCache","caches","responseFromNetwork","putInCache","clone","error","Response","status","headers","response","cache","open","put"],"version":3,"file":"service-workers.js.map"}